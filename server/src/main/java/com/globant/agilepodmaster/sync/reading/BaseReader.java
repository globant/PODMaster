package com.globant.agilepodmaster.sync.reading;

import com.globant.agilepodmaster.sync.SyncContext;
import com.globant.agilepodmaster.sync.datamodel.DataSource;
import com.globant.agilepodmaster.sync.datamodel.ProjectDataSet;
import com.globant.agilepodmaster.sync.datamodel.ReleaseData;

import org.springframework.util.StringUtils;

import lombok.Getter;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;

/**
 * Base class for every reader. 
 * @author jose.dominguez@globant.com
 *
 */
@RequiredArgsConstructor
public abstract class BaseReader {
  
  @Getter
  @NonNull 
  protected SyncContext syncContext;
  
  /**
   * Reads data according reader configuration.
   * 
   * @param projectDataSet DTO where data collected is stored.
   */
  public abstract void read(ProjectDataSet projectDataSet);
  
  protected abstract String getName();

  
  /**
   * Return release if exists. Or create a release if does not exists. If name
   * is empty a "default" release is created.
   * 
   * @param projectDataSet DTO where data collected is stored.
   * @param releaseName release name to get or create.
   * @return release.
   */
  protected ReleaseData getOrCreateReleaseFor(ProjectDataSet projectDataSet,
      final String releaseName) {
    
    ReleaseData defaultRelease = null;
    
    if (StringUtils.isEmpty(releaseName)) {

      for (ReleaseData release : projectDataSet.getReleases()) {
        if (release.isAutoGenerated()) {
          defaultRelease = release;
          break;
        }
      }

      if (defaultRelease == null) {
        defaultRelease = new ReleaseData("Default", true);
        projectDataSet.getReleases().add(defaultRelease);
      }
      return defaultRelease;
    }

    for (ReleaseData release : projectDataSet.getReleases()) {
      if (release.getName().equals(releaseName)) {
        defaultRelease = release;
        break;
      }
    }

    if (defaultRelease == null) {
      defaultRelease = new ReleaseData(releaseName, false);
      projectDataSet.getReleases().add(defaultRelease);

    }
    return defaultRelease;

  }



}
