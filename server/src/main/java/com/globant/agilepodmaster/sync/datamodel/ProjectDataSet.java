package com.globant.agilepodmaster.sync.datamodel;

import com.globant.agilepodmaster.sync.SyncContext;
import com.globant.agilepodmaster.sync.datamodel.PodData.PodMemberData;
import com.globant.agilepodmaster.sync.reading.Reader;

import org.springframework.util.StringUtils;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import lombok.Data;
import lombok.Getter;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;

/**
 * DTO to move all data taken from the data sources to import process.
 * 
 * @author jose.dominguez@globant.com
 *
 */
@Data
@RequiredArgsConstructor
public class ProjectDataSet implements Serializable {

  public SnapshotData snapshot;

  public List<NonWorkingDaysData> nonWorkingDays;

  @NonNull
  public List<PodData> pods;

  @NonNull
  public List<ReleaseData> releases;


  @Data
  public static class Builder {

    private List<PodData> pods;
    private List<ReleaseData> releases;

    @Getter
    protected SyncContext syncContext;

    public Builder(SyncContext syncContext) {
      this.syncContext = syncContext;
      this.pods = new ArrayList<PodData>();
      this.releases = new ArrayList<ReleaseData>();
    }

    public Builder add(final Reader reader) {
      reader.readInto(this);
      return this;
    }

    public ProjectDataSet build() {
      return new ProjectDataSet(pods, releases);
    }

    // utility methods
    
    /**
     * Return release if exists. Or create a release if does not exists. If name
     * is empty a "default" release is created.
     */
    public ReleaseData getOrCreateReleaseFor(final String releaseName) {

      ReleaseData defaultRelease = null;

      if (StringUtils.isEmpty(releaseName)) {

        for (ReleaseData release : releases) {
          if (release.isAutoGenerated()) {
            defaultRelease = release;
            break;
          }
        }

        if (defaultRelease == null) {
          defaultRelease = new ReleaseData("Default", true);
          releases.add(defaultRelease);
        }
        return defaultRelease;
      }

      for (ReleaseData release : releases) {
        if (release.getName().equals(releaseName)) {
          defaultRelease = release;
          break;
        }
      }

      if (defaultRelease == null) {
        defaultRelease = new ReleaseData(releaseName, false);
        releases.add(defaultRelease);

      }
      return defaultRelease;
    }
    
    public PodMemberData getPodMemberByUsername(String externalUsername) {
      PodMemberData podMemberResult = null;
      for (PodData pod : pods) {
        for (PodMemberData podMember : pod.getPodMembers()) {
          if (podMember.getExternalUsername()
              .equalsIgnoreCase(externalUsername)) {
            podMemberResult = podMember;
            break;
          }
        }
      }
      return podMemberResult;
    }

    public PodData getPodByUsername(String externalUsername) {
      PodData podResult = null;
      for (PodData pod : pods) {
        for (PodMemberData podMember : pod.getPodMembers()) {
          if (podMember.getExternalUsername()
              .equalsIgnoreCase(externalUsername)) {
            podResult = pod;
            break;
          }
        }
      }
      return podResult;
    }

    public PodData getPodByName(String podName) {
      PodData podResult = null;
      for (PodData pod : pods) {
        if (pod.getName().equalsIgnoreCase(podName)) {
          podResult = pod;
          break;
        }
      }
      return podResult;
    }

    public PodData getOrCreatePod(PodData.PodTypeData type) {
      PodData podResult = null;
      for (PodData pod : pods) {
        if (pod.getPodType() == type) {
          podResult = pod;
          break;
        }
      }

      if (podResult == null) {
        podResult = new PodData(type);
        pods.add(podResult);
      }
      return podResult;
    }

  }

}
