package com.globant.agilepodmaster.sync.datamodel;

import com.globant.agilepodmaster.sync.SyncContext;
import com.globant.agilepodmaster.sync.datamodel.PodData.PodMemberData;
import com.globant.agilepodmaster.sync.reading.Reader;
import com.globant.agilepodmaster.sync.reading.jira.responses.Issue.Fields;
import com.globant.agilepodmaster.sync.reading.jira.responses.SprintReport.Sprint;

import org.springframework.util.StringUtils;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import lombok.Data;
import lombok.Getter;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;

/**
 * DTO to move all data taken from the data sources to import process.
 * 
 * @author jose.dominguez@globant.com
 *
 */
@Data
@RequiredArgsConstructor
public class ProjectDataSet implements Serializable {

  public SnapshotData snapshot;

  public List<NonWorkingDaysData> nonWorkingDays;

  @NonNull
  public List<PodData> pods;

  @NonNull
  public List<ReleaseData> releases;


  
  public static class Builder {

    @Getter
    private List<PodData> pods;
    
    @Getter
    private List<ReleaseData> releases;

    private SyncContext syncContext;
    
    private ReleaseData defaultRelease;
    
    private SprintData defaultSprint;

    public Builder(SyncContext syncContext) {
      this.syncContext = syncContext;
      this.pods = new ArrayList<PodData>();
      this.releases = new ArrayList<ReleaseData>();
    }

    public Builder add(final Reader reader) {
      reader.readInto(this);
      return this;
    }

    /**
     * Create a release if does not exists. If name is empty a "default" release
     * is created.
     */
    public Builder withRelease(final String releaseName) {


      if (StringUtils.isEmpty(releaseName)) {

        for (ReleaseData release : releases) {
          if (release.isAutoGenerated()) {
            defaultRelease = release;
            break;
          }
        }

        if (defaultRelease == null) {
          defaultRelease = new ReleaseData("Default", true);
          releases.add(defaultRelease);
        }
        return this;
      }

      for (ReleaseData release : releases) {
        if (release.getName().equals(releaseName)) {
          defaultRelease = release;
          break;
        }
      }

      if (defaultRelease == null) {
        defaultRelease = new ReleaseData(releaseName, false);
        releases.add(defaultRelease);

      }
      return this;
    }
    
    public Builder addSprint(String name, Sprint jiraSprint) {
      SprintData sprintData = new SprintData(name, defaultRelease.getSprints()
          .size() + 1, getJiraDate(jiraSprint.getStartDate()),
          getJiraDate(jiraSprint.getEndDate()));

      defaultRelease.getSprints().add(sprintData);
      defaultSprint = sprintData;
      
      return this;

    }
    
    public Builder addSprintTask(String key, Fields fields) {

      TaskData taskData = new TaskData();

      taskData.setKey(key.substring(0, Math.min(key.length(), 100)));
      taskData.setName(fields.getSummary().substring(0,
          Math.min(fields.getSummary().length(), 100)));
      // TODO set the rest of the fields
      defaultSprint.getSprintTasks().add(taskData);

      return this;
    }
    
    public Builder addBacklogTask(String key, Fields fields) {

      TaskData taskData = new TaskData();

      taskData.setKey(key.substring(0, Math.min(key.length(), 100)));
      taskData.setName(fields.getSummary().substring(0,
          Math.min(fields.getSummary().length(), 100)));
      // TODO set the rest of the fields
      defaultRelease.getBacklog().add(taskData);

      return this;
    }
    

    public ProjectDataSet build() {
      // TODO Calculate Sub tasks.
      // TODO Add members to tasks.
      
      
      return new ProjectDataSet(pods, releases);
    }
    

    public void warnMessage(String message) {
      syncContext.warn(message);
    }
    
    public void infoMessage(String message) {
      syncContext.info(message);
    }
    
    public void errorMessage(String message) {
      syncContext.error(message);
    }
    
    
    public PodMemberData getPodMemberByUsername(String externalUsername) {
      PodMemberData podMemberResult = null;
      for (PodData pod : pods) {
        for (PodMemberData podMember : pod.getPodMembers()) {
          if (podMember.getExternalUsername()
              .equalsIgnoreCase(externalUsername)) {
            podMemberResult = podMember;
            break;
          }
        }
      }
      return podMemberResult;
    }

    public PodData getPodByUsername(String externalUsername) {
      PodData podResult = null;
      for (PodData pod : pods) {
        for (PodMemberData podMember : pod.getPodMembers()) {
          if (podMember.getExternalUsername()
              .equalsIgnoreCase(externalUsername)) {
            podResult = pod;
            break;
          }
        }
      }
      return podResult;
    }

    public PodData getPodByName(String podName) {
      PodData podResult = null;
      for (PodData pod : pods) {
        if (pod.getName().equalsIgnoreCase(podName)) {
          podResult = pod;
          break;
        }
      }
      return podResult;
    }

    public PodData getOrCreatePod(PodData.PodTypeData type) {
      PodData podResult = null;
      for (PodData pod : pods) {
        if (pod.getPodType() == type) {
          podResult = pod;
          break;
        }
      }

      if (podResult == null) {
        podResult = new PodData(type);
        pods.add(podResult);
      }
      return podResult;
    }
    
    // TODO do it independent of JIRA format
    private Date getJiraDate(final String theDate) {
      Date date = null;
      try {
        date = new SimpleDateFormat("d/M/y", Locale.ENGLISH).parse(theDate);
      } catch (ParseException e) {
        syncContext.error("Invalid date format:{0}", theDate);
      }
      return date;
    }


    

  }

}
