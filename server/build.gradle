buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.7.RELEASE")
    classpath("org.flywaydb:flyway-gradle-plugin:3.0")    
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'jacoco'
apply plugin: 'pmd'
pmd {
  ruleSetFiles = files("build-config/pmd/pmd.xml")
}

apply plugin: 'checkstyle' //http://www.gradle.org/docs/current/userguide/checkstyle_plugin.html
checkstyle {
  toolVersion = '5.7'
  configFile = file('build-config/checkstyle/checkstyle-5.7.xml')
}


apply plugin: 'flyway'
flyway {
  user = 'sa'
  password = ''
  url = 'jdbc:hsqldb:file:./build/hsqldb/podmaster.hsqldb'
}

// Add provided dependency scope
configurations {
  provided {
    dependencies.all { dep ->
      configurations.default.exclude group: dep.group, module: dep.name
    }
  }
  compile.extendsFrom provided
}

jar {
  baseName = 'gs-spring-boot'
  version =  '0.1.0'
}

repositories {
  mavenCentral()
}

dependencies {
  provided("org.projectlombok:lombok:1.14.8")

  compile("org.springframework.boot:spring-boot-starter-data-jpa")
  compile("org.springframework.hateoas:spring-hateoas")
  compile("org.springframework.boot:spring-boot-starter-data-rest")
  compile("org.springframework.data:spring-data-rest-webmvc:2.2.0.RELEASE") //override default version
  compile("org.flywaydb:flyway-core:3.0")
    
  // tag::jetty[]
  compile("org.springframework.boot:spring-boot-starter-web") {
    exclude module: "spring-boot-starter-tomcat"
  }
  compile("org.springframework.boot:spring-boot-starter-jetty")
  // end::jetty[]

  // tag::actuator[]
  compile("org.springframework.boot:spring-boot-starter-actuator")
  // end::actuator[]

  testCompile("junit:junit")
  testCompile("org.springframework.boot:spring-boot-starter-test")

  runtime("org.hsqldb:hsqldb")
}

sourceSets {
  integrationTest {
    java.srcDir file('src/integration-test/java')
    resources.srcDir('src/integration-test/resources')
    compileClasspath = sourceSets.main.output + configurations.testRuntime
    runtimeClasspath = output + compileClasspath
  }
}

// http://www.slideshare.net/SpringCentral/cd-pipeline-gradlejenkins
task integrationTest(type: Test) {
  description = 'Runs the integration tests.'
  group = 'verification'
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  //testResultsDir = file("$testResultsDir/integration")
}

task jacocoIntegrationTestReport(type: JacocoReport) {
  sourceSets sourceSets.main
  executionData 'integration-test' //Verify
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.1'
}

jacocoTestReport {
  reports {
    xml.enabled true
  }
}

task checkCoverage(dependsOn: jacocoTestReport) {
  def LINE_COVERAGE_THRESHOLD = 0.77
  def BRANCH_COVERAGE_THRESHOLD = 0.11
  def INSTRUCTION_COVERAGE_THRESHOLD = 0.39

  def missed = { counter -> counter.@missed.text().toInteger() }
  def covered = { counter -> counter.@covered.text().toInteger() }
  def coverage = { counter -> covered(counter) / (missed(counter) + covered(counter)) }
  def counter = { records, name -> records.counter.find{it.@type==name} }

  def xml = file("$buildDir/reports/jacoco/test/jacocoTestReport.xml").text

  def parser = new XmlSlurper() 
  parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
  parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false); 
  parser.setFeature("http://xml.org/sax/features/namespaces", false)
  
  def records = parser.parseText(xml)

  def line_counter = counter(records, 'LINE')
  def line_coverage = coverage(line_counter)
  assert line_coverage >= LINE_COVERAGE_THRESHOLD

  def branch_counter = counter(records, 'BRANCH')
  def branch_coverage = coverage(branch_counter)
  assert branch_coverage >= BRANCH_COVERAGE_THRESHOLD

  def instruction_counter = counter(records, 'INSTRUCTION')
  def instruction_coverage = coverage(instruction_counter)
  assert instruction_coverage >= INSTRUCTION_COVERAGE_THRESHOLD
}

check.dependsOn checkCoverage
distZip.dependsOn check
distTar.dependsOn check
